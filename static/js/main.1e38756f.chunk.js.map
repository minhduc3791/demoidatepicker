{"version":3,"sources":["logo.svg","IDatepicker/idatepicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IDatepicker","props","state","value","date","moment","showDatepicker","alert","alertMessages","_onFocus","bind","_onBlur","handleChange","onPressEnter","onSelect","console","log","this","setState","event","target","toLowerCase","validate","RegExp","number","test","n","parseInt","match","currentDate","add","format","style","width","border","borderRadius","message","type","placeholder","fontWeight","onFocus","onBlur","onChange","suffix","color","fullscreen","React","Component","App","className","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e38756f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport \"antd/dist/antd.css\";\r\nimport { Input, Calendar, Tooltip, Icon, Alert  } from 'antd';\r\nimport moment from 'moment'\r\n\r\nclass IDatepicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n      date: moment(),\r\n      showDatepicker: false,\r\n      alert: false, \r\n      alertMessages: ''\r\n    };\r\n\r\n    this._onFocus = this._onFocus.bind(this);\r\n    this._onBlur = this._onBlur.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onPressEnter = this.onPressEnter.bind(this);\r\n    this.onSelect = this.onSelect.bind(this);\r\n  }\r\n\r\n  _onFocus(){\r\n    console.log(this.state.value);\r\n    this.setState({showDatepicker: true})\r\n  }\r\n\r\n  _onBlur(){\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  onPressEnter(){\r\n    this.setState({showDatepicker: false})\r\n    var value = this.state.value.toLowerCase();\r\n    var validate = new RegExp('^([tyhwme])(-?)([0-9])$', 'i');\r\n    var number = new RegExp('(-?)([0-9])$');\r\n\r\n    if(validate.test(value)){\r\n\r\n      var n = parseInt(value.match(number));\r\n      var currentDate = this.state.date;\r\n\r\n      switch(value[0]) {\r\n        case 't':\r\n          currentDate = moment(currentDate).add(n, 'days');\r\n          this.setState({date: currentDate});\r\n          this.setState({value: currentDate.format('DD-MM-YYYY')});\r\n          break;\r\n\r\n        case 'y':\r\n          currentDate = moment(currentDate).add(-1, 'days');\r\n          this.setState({date: currentDate});\r\n          this.setState({value: currentDate.format('DD-MM-YYYY')});\r\n          break;\r\n\r\n        case 'w':\r\n          currentDate = moment(currentDate).add(n, 'weeks');\r\n          this.setState({date: currentDate});\r\n          this.setState({value: currentDate.format('DD-MM-YYYY')});\r\n          break;\r\n\r\n        case 'm':\r\n          currentDate = moment(currentDate).add(n, 'months');\r\n          this.setState({date: currentDate});\r\n          this.setState({value: currentDate.format('DD-MM-YYYY')});\r\n          break;\r\n        default:\r\n      }\r\n    } else {\r\n      this.setState({date: moment()});\r\n      this.setState({value: moment().format('DD-MM-YYYY')});\r\n    }\r\n  }\r\n\r\n  onSelect(value){\r\n    this.setState({date: value})\r\n    this.setState({value: value.format('DD-MM-YYYY')});\r\n    this.setState({showDatepicker: false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: 500, border: '1px solid #d9d9d9', borderRadius: 4 }}>\r\n        { this.state.alert &&\r\n          <Alert message={this.alertMessages} type=\"error\" />\r\n        }\r\n        <Input placeholder=\"\" style={{fontWeight: 'bold'}} \r\n          onFocus={this._onFocus} \r\n          onBlur={this._onBlur} \r\n          value={this.state.value} \r\n          onChange={this.handleChange} \r\n          onPressEnter={this.onPressEnter} \r\n          suffix={<Tooltip>\r\n            <Icon type=\"calendar\" style={{ color: 'rgba(0,0,0,.45)' }} />\r\n          </Tooltip>}\r\n        />\r\n        { this.state.showDatepicker &&\r\n          <div style={{ width: 300, border: '1px solid #d9d9d9', borderRadius: 4 }}>\r\n            <Calendar fullscreen={false} onSelect={this.onSelect} />\r\n          </div> \r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IDatepicker;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport IDatepicker from './IDatepicker/idatepicker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \t<IDatepicker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}